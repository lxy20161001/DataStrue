#include <Array>
#include<iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include "../Array/Array.h"


#ifndef DATASTRUCT_QUEUE_H
#define DATASTRUCT_QUEUE_H

using namespace std;

template <typename T>
class Queue{
public:
    virtual int getSize(){};
    virtual bool isEmpty(){};
    virtual void enqueue(T e){};
    virtual T dequeue(){};
    virtual T getFront(){};
};

template <typename T>
class ArrayQueue:public Queue<T> {

private:
    int capacity;
    Array<T>* array;

public:
    ArrayQueue(int capacity){
        this->capacity = capacity;
        array = new Array<T>(this->capacity);
    }

    ArrayQueue(){
        array = new Array<T>();
    }

    ~ArrayQueue(){
        delete[] array;
    }

    int getSize(){
        return array->getSize();
    }

    bool isEmpty(){
        return array->isEmpty();
    }

    void enqueue(T e){
        array->addLast(e);
    }

    T dequeue(){
        return array->RemoveFirst();
    }

    T getFront(){
        return array->getFirst();
    }

    void Print(){
        int newSize = array->getSize();
        int NewCapacity = 100;
        std::string newdata[NewCapacity];
        std::cout<<
                 "Queue: "<<std::endl;
        newdata[0]="front [";
        for(int i=0;i<newSize;i++){
            newdata[i+1]=std::to_string(array->get(i));
            if(i!=newSize-1){
                newdata[i+1]=std::to_string(array->get(i))+", ";
            }
        }
        newdata[newSize+1]="] tail";
        for(int i=0;i<newSize+2;i++){
            std::cout<<newdata[i]<<" ";
        }
        std::cout<<""<<std::endl;
    }

};


#endif //DATASTRUCT_QUEUE_H
